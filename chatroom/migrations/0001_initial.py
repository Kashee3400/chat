# Generated by Django 4.1.13 on 2025-02-20 06:17

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CallLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(verbose_name='Started At')),
                ('ended_at', models.DateTimeField(blank=True, null=True, verbose_name='Ended At')),
                ('call_type', models.CharField(choices=[('voice', 'Voice Call'), ('video', 'Video Call')], max_length=50, verbose_name='Call Type')),
                ('status', models.CharField(choices=[('missed', 'Missed'), ('answered', 'Answered'), ('declined', 'Declined')], max_length=50, verbose_name='Call Status')),
            ],
            options={
                'verbose_name': 'Call Log',
                'verbose_name_plural': 'Call Logs',
                'db_table': 'chat_call log',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('category_type', models.CharField(choices=[('post', 'Post'), ('chatroom', 'Chat Room')], max_length=20)),
                ('fee_status', models.CharField(choices=[('free', 'Free'), ('paid', 'Paid')], max_length=20)),
                ('ordering', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='ChatRoomModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Delete')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated At')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('room_name', models.CharField(blank=True, help_text='Optional name for the group chat', max_length=255, null=True, verbose_name='Room Name')),
                ('room_type', models.CharField(choices=[('one_to_one', 'One to One'), ('group', 'Group')], default='one_to_one', help_text='Defines if the room is a one-to-one chat or a group chat', max_length=10, verbose_name='Room Type')),
            ],
            options={
                'verbose_name': 'Chat Room',
                'verbose_name_plural': 'Chat Rooms',
                'db_table': 'chat_rooms',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ChatRoomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=220, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=220, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='DirectMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DirectMessageUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend_type', models.CharField(choices=[('buddies', 'Buddies'), ('family', 'Family'), ('co-workers', 'Co-Workers')], default='buddies', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('blocked', 'Blocked')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MediaFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.CharField(help_text='Path to the media file on the server', max_length=255, verbose_name='File Path')),
                ('local_path', models.CharField(blank=True, help_text='Path to the media file on the local device', max_length=255, null=True, verbose_name='Local Path')),
            ],
        ),
        migrations.CreateModel(
            name='MediaSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_size', models.PositiveIntegerField(help_text='Maximum allowed size for the media file in bytes', verbose_name='Max Size (bytes)')),
                ('max_length', models.PositiveIntegerField(blank=True, help_text='Maximum allowed length for media files in seconds (for videos/audio)', null=True, verbose_name='Max Length (seconds)')),
                ('max_files', models.PositiveIntegerField(blank=True, help_text='Maximum number of files allowed in a single message', null=True, verbose_name='Max Number of Files')),
                ('additional_fields', models.JSONField(blank=True, default=dict, verbose_name='Additional Fields')),
            ],
            options={
                'verbose_name': 'Media Setting',
                'verbose_name_plural': 'Media Settings',
                'db_table': 'media_settings',
            },
        ),
        migrations.CreateModel(
            name='MediaType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Delete')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated At')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('type', models.CharField(help_text='The name of the media type (e.g., Image, Video, etc.)', max_length=50, unique=True, verbose_name='Media Type Name')),
                ('icon', models.ImageField(blank=True, help_text='Icon representing the media type', null=True, upload_to='media_icons/', verbose_name='Icon')),
                ('description', models.TextField(blank=True, help_text='Description of the media type and its usage', null=True, verbose_name='Description')),
                ('allowed_extensions', models.TextField(blank=True, help_text='Comma-separated list of allowed file extensions (e.g., .jpg, .png)', null=True, verbose_name='Allowed Extensions')),
            ],
            options={
                'verbose_name': 'Media Type',
                'verbose_name_plural': 'Media Types',
                'db_table': 'media_types',
            },
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('like', 'Like'), ('love', 'Love'), ('laugh', 'Laugh'), ('wow', 'Wow')], max_length=50, verbose_name='Reaction Type')),
            ],
            options={
                'verbose_name': 'Chat Reaction',
                'verbose_name_plural': 'Chat Reactions',
                'db_table': 'chat_reactions',
            },
        ),
        migrations.CreateModel(
            name='ReadReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(auto_now_add=True, verbose_name='Read At')),
            ],
            options={
                'verbose_name': 'Read Receipt',
                'verbose_name_plural': 'Read Receipts',
                'db_table': 'chat_read_receipt',
            },
        ),
        migrations.CreateModel(
            name='RoomMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('max_user', models.PositiveIntegerField(default=35)),
                ('max_previous_message', models.PositiveIntegerField(default=200)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TextMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('sent_at', models.DateTimeField(auto_now_add=True, help_text='The time the message was sent', verbose_name='Sent Time')),
                ('delivered_at', models.DateTimeField(blank=True, help_text='The time the message was delivered to the recipient', null=True, verbose_name='Delivered Time')),
                ('seen_at', models.DateTimeField(blank=True, help_text='The time the message was seen by the recipient', null=True, verbose_name='Seen Time')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Delete')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated At')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video'), ('call', 'Call')], default='text', help_text='Type of the message. For ex:- call, text, media', max_length=100)),
                ('synced', models.BooleanField(default=True, help_text='This handles the message syncing with mobile database to the server database')),
                ('msg', models.TextField(blank=True, help_text='The content of the message', null=True, verbose_name='Message Text')),
                ('is_edited', models.BooleanField(default=False, help_text='Indicates whether the message has been edited', verbose_name='Edited')),
                ('old_msg', models.TextField(blank=True, help_text='The content of the message before it was edited', null=True, verbose_name='Previous Message Text')),
                ('chat_room', models.ForeignKey(help_text='The chat room to which the message belongs', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_messages', to='chatroom.chatroommodel', verbose_name='Chat Room')),
                ('reply_to', models.ForeignKey(blank=True, help_text='The message this one is replying to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='chatroom.textmessage', verbose_name='Reply To')),
            ],
            options={
                'db_table': 'chat_text_messages',
                'ordering': ['-sent_at'],
                'abstract': False,
            },
        ),
    ]
