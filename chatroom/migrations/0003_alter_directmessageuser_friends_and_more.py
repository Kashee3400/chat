# Generated by Django 4.1.13 on 2025-02-21 15:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('chatroom', '0002_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='directmessageuser',
            name='friends',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to=settings.AUTH_USER_MODEL, verbose_name='Receiver'),
        ),
        migrations.AlterField(
            model_name='directmessageuser',
            name='me',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='me', to=settings.AUTH_USER_MODEL, verbose_name='Sender'),
        ),
        migrations.AlterField(
            model_name='directmessageuser',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('hidden', 'Hidden'), ('blocked', 'Blocked')], default='pending', max_length=20),
        ),
        migrations.CreateModel(
            name='UserStatusModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Delete')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated At')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('is_online', models.BooleanField(default=False, help_text='Indicates if the user is currently online', verbose_name='Online Status')),
                ('last_online', models.DateTimeField(default=django.utils.timezone.now, help_text='The last time the user was online', verbose_name='Last Online')),
                ('scheduled_start', models.DateTimeField(blank=True, help_text='The time the user has scheduled to come online', null=True, verbose_name='Scheduled Start Time')),
                ('scheduled_end', models.DateTimeField(blank=True, help_text='The time the user has scheduled to go offline', null=True, verbose_name='Scheduled End Time')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('user', models.OneToOneField(help_text='The user whose status is being stored', on_delete=django.db.models.deletion.CASCADE, related_name='status', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Status',
                'verbose_name_plural': "Users' Statuses",
                'db_table': 'user_status',
                'ordering': ['user'],
            },
        ),
        migrations.CreateModel(
            name='ReportUserModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Delete')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated At')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('reason', models.CharField(choices=[('inappropriate', 'Inappropriate Behavior'), ('spam', 'Spam'), ('others', 'Other Reasons')], help_text='The reason for the report', max_length=15, verbose_name='Report Reason')),
                ('description', models.TextField(help_text='Description of the issue in the report', verbose_name='Report Description')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('reported_user', models.ForeignKey(help_text='The user being reported', on_delete=django.db.models.deletion.CASCADE, related_name='reported_user', to=settings.AUTH_USER_MODEL, verbose_name='Reported User')),
                ('reporter', models.ForeignKey(help_text='The user reporting the issue', on_delete=django.db.models.deletion.CASCADE, related_name='reported_by', to=settings.AUTH_USER_MODEL, verbose_name='Reporter')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'User Report',
                'verbose_name_plural': 'User Reports',
                'db_table': 'user_reports',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='BlockedUserLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(help_text='block or unblock', max_length=20, verbose_name='Action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('chat_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chatroom.chatroommodel', verbose_name='Chat Room')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='block_actions_performed', to=settings.AUTH_USER_MODEL, verbose_name='Performed By')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Blocked User Log',
                'verbose_name_plural': 'Blocked User Logs',
            },
        ),
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, null=True, unique=True, verbose_name='Slug')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is Delete')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Updated At')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('blocked_at', models.DateTimeField(auto_now_add=True, verbose_name='Blocked At')),
                ('unblocked_at', models.DateTimeField(blank=True, null=True, verbose_name='Unblocked At')),
                ('blocked_user', models.ForeignKey(help_text='The user that is blocked in this chat room', on_delete=django.db.models.deletion.CASCADE, related_name='blocked_in_rooms', to=settings.AUTH_USER_MODEL, verbose_name='Blocked User')),
                ('chat_room', models.ForeignKey(help_text='The chat room in which the user is blocked', on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to='chatroom.chatroommodel', verbose_name='Chat Room')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Blocked User',
                'verbose_name_plural': 'Blocked Users',
            },
        ),
        migrations.AddIndex(
            model_name='userstatusmodel',
            index=models.Index(fields=['user'], name='user_status_user_id_45e1d6_idx'),
        ),
        migrations.AddConstraint(
            model_name='userstatusmodel',
            constraint=models.UniqueConstraint(fields=('user',), name='unique_user_status'),
        ),
        migrations.AddIndex(
            model_name='reportusermodel',
            index=models.Index(fields=['reporter', 'reported_user'], name='user_report_reporte_dcdf0a_idx'),
        ),
        migrations.AddConstraint(
            model_name='reportusermodel',
            constraint=models.UniqueConstraint(fields=('reporter', 'reported_user', 'reason'), name='unique_report'),
        ),
        migrations.AddIndex(
            model_name='blockeduserlog',
            index=models.Index(fields=['chat_room', 'user', 'action'], name='chat_room_user_action_idx'),
        ),
        migrations.AddIndex(
            model_name='blockeduser',
            index=models.Index(fields=['chat_room', 'blocked_user'], name='chat_room_blocked_user_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='blockeduser',
            unique_together={('chat_room', 'blocked_user')},
        ),
    ]
